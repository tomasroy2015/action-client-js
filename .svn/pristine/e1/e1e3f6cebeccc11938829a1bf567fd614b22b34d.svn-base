"use strict";

define(['application-configuration', 'dataFilterFactory', 'CreateViewDataFactory'], function (app) {

    app.register.controller('dataFilterController', ['$scope', '$interval', 'dataFactory', 'dataFilterFactory', 'Notify', 'CreateViewDataFactory', 'uiGridTreeViewConstants', function ($scope, $interval, dataFactory, dataFilterFactory, Notify, CreateViewDataFactory, uiGridTreeViewConstants) {

        $scope.dataFilterFactory = dataFilterFactory;

        $scope.$watch(function () {
            return dataFilterFactory.GetSelectedAttributeIndex();
        }, function (newIndex) {
            if (newIndex !== undefined && newIndex >= 0) {
                var attDataCollection = dataFactory.GetAtributeScoreDataCollection();

                var query = _.filter(attDataCollection, function (n) {
                    return n.AttributeIndex == newIndex;
                });

                if (query !== undefined && query.length === 0) {
                    prepareSelectedAttributeServiceAreaData();
                }
                else {
                    loadDataFilterData(query[0].ScoreDataCollection);
                }
            }
        });


        $scope.$on(Notify.ATTRIBUTE_DATA_READY, function (event) {
            var attDataCollection = dataFactory.GetAtributeScoreDataCollection();

            var query = _.filter(attDataCollection, function (n) {
                return n.AttributeIndex == dataFilterFactory.GetSelectedAttributeIndex();
            })
            if (query && query.length > 0) {
                //var sSA = dataFactory.GetSelectedServiceArea();
                loadDataFilterData(query[0].ScoreDataCollection);
            }
        });

        function loadDataFilterData(data) {
            //TODO
            console.log(data);
            var selectedServiceAreaId = dataFactory.GetSelectedServiceArea().Id;
            var preparedData = [];
            _.forEach(data, function (n, key) {
                var oDataFilterViewData = CreateViewDataFactory.DataFilterViewData(selectedServiceAreaId, n);
                oDataFilterViewData.$$treeLevel = 0;
                preparedData.push(oDataFilterViewData);
                if (n.IsGroup && n.GroupItemsScoreDataCollection && n.GroupItemsScoreDataCollection.length > 0) {
                    _.forEach(n.GroupItemsScoreDataCollection, function (n2) {
                        oDataFilterViewData = CreateViewDataFactory.DataFilterViewData(selectedServiceAreaId, n2);
                        oDataFilterViewData.IsChild = true;
                        preparedData.push(oDataFilterViewData);
                    });
                }
            });
            $scope.gridPreparedData = preparedData;
            gridRefresh();
        }

        function prepareSelectedAttributeServiceAreaData() {
            gridReset();
            var selectedAttribute = {
                Label: dataFilterFactory.GetSelectedAttribute().Label,
                Index: dataFilterFactory.GetSelectedAttribute().Index,
                Type: dataFilterFactory.GetSelectedAttribute().Type
            };

            var requestParam = attributeRequestParam(selectedAttribute);
            dataFactory.GetSelectedAttributeScoreData(requestParam);
        }

        function attributeRequestParam(attr) {
            var applicationDataInfo = dataFactory.DataInfo();
            var selectedSurveyType = dataFactory.GetSelectedServiceAreaSurveyType();

            return {
                sessionID: applicationDataInfo.sessionID,
                customerID: applicationDataInfo.customerID,
                fromDate: applicationDataInfo.fromDate,
                toDate: applicationDataInfo.toDate,
                attributeIndex: attr.Index,
                surveyType: selectedSurveyType
            }
        };

        //$scope.gridOptions.data = gridPreparedData;
        //$scope.gridOptions.columnDefs =  $scope.columnDefs;

        $scope.columnDefs = [
            {
                field: 'Name', displayName: 'NAME', width: 205,
                cellTemplate: '<div class="ui-grid-cell-contents" ng-class="{\'child-item\':row.entity.IsChild}"><i aria-hidden="true" ng-if="row.entity.IsGroup" ng-click="grid.appScope.toggleRow($event,row)" ng-class="{\'fa fa-play\': row.treeNode.state === \'collapsed\', \'fa fa-play fa-rotate-90\': row.treeNode.state === \'expanded\'}"></i> {{row.entity.Name}}</div>'

                //    , cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {
                //    if (rowRenderIndex === (grid.rows.length-1)) {
                //        return 'last-item';
                //    }
                //}
            },
            {field: 'Score', displayName: 'SCORE', width: 80, cellClass: 'center-text'},
            {field: 'Respondent', displayName: '#RESP', width: 80, cellClass: 'center-text'}];

        $scope.lastItem = function (grid, row) {

            var currentIndex = $scope.gridPreparedData.indexOf(row.entity);
            // console.log(grid);

            if (currentIndex === (grid.rows.length - 1)) {
                return 'last-item';
            }
        };
        $scope.SelectedItems = [];
        $scope.gridOptions = {
            //data: 'gridPreparedData',
            enableSorting: true,
            rowHeight: 25,
            //columnDefs: $scope.columnDefs,
            enableColumnMenus: false,
            enableRowSelection: true,
            enableSelectAll: true,
            showTreeExpandNoChildren: false,
            showTreeRowHeader: false,
            selectionRowHeaderWidth: 20,
            treeRowHeaderAlwaysVisible: false,
            //rowTemplate: '<div><div id="{{rowRenderIndex}}" ng-repeat="col in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell row-color" ui-grid-cell></div></div>'
            rowTemplate: 'Views/DataFilter/DataFilterRowTemplate.html'
        };

        $scope.gridOptions.columnDefs = $scope.columnDefs;
        $scope.gridOptions.enableFullRowSelection = true;
        $scope.gridOptions.onRegisterApi = function (gridApi) {
            $scope.gridApi = gridApi;
            gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                //$scope.SelectedItems = gridApi.selection.getSelectedRows();
                if (row && row.isSelected) {
                    $scope.SelectedItems.push(row);
                    if (row.treeNode && row.treeNode.children) {
                        row.treeNode.children.forEach(function (childNode) {
                            //childNode.row.isSelected = true;
                            childNode.row.setSelected(true);
                            $scope.SelectedItems.push(childNode.row);
                        });
                    }
                } else if (row && !row.isSelected) {
                    var index = -1;
                    if ($scope.SelectedItems && $scope.SelectedItems.length > 0) {
                        index = $scope.SelectedItems.indexOf(row);
                        if (index > -1) {
                            $scope.SelectedItems.splice(index, 1);
                        }
                        if (row.treeNode && row.treeNode.children.length > 0) {
                            var childIndex = -1;
                            row.treeNode.children.forEach(function (childNode) {
                                //childNode.row.isSelected = false;
                                childNode.row.setSelected(false);
                                childIndex = $scope.SelectedItems.indexOf(childNode.row);
                                if (childIndex > -1) {
                                    $scope.SelectedItems.splice(childIndex, 1);
                                }
                            });
                        }
                    }
                }
            });
        };

        $interval(function () {
            $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
        }, 0, 1);

        function gridRefresh() {
            $scope.gridOptions.data = $scope.gridPreparedData;
            $scope.gridApi.grid.refresh();
        }

        function gridReset() {
            $scope.gridPreparedData = [];
            $scope.gridOptions.data = $scope.gridPreparedData;
            $scope.gridApi.grid.refresh();
        }

        $scope.toggleRow = function (event, row) {
            //$scope.gridApi.treeBase.toggleRowTreeState($scope.gridApi.grid.renderContainers.body.visibleRowCache[rowNum]);
            $scope.gridApi.treeBase.toggleRowTreeState(row);
            event.preventDefault();
            event.stopPropagation();
        };

        /* Row hovering event handler
         ======================================================*/

        $scope.rowHover = function (row) {
            //console.log('row hover...');
        };

        $scope.rowHoverOut = function (row) {
            //console.log('row hover out...');
        };

        /* Apply button event
         ======================================================*/
        $scope.btnApplyEventHandler = function () {
            var seletedItems = $scope.SelectedItems;
        };

    }]);

});
