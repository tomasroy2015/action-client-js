"use strict";

define(['application-configuration', 'd3','topojson','dataFactory','CreateViewDataFactory', 'comparatorFactory'], function (app,d3,topojson) {

    app.register.controller('mapViewController', ['$document','$rootScope','$scope','$timeout','dataFactory','Notify','CreateViewDataFactory','comparatorFactory','serviceAreaScoreData', 'fullScorecardDataFactory', 'attributeScoreSummaryData',
        function ($document,$rootScope,$scope,$timeout,dataFactory,Notify,CreateViewDataFactory,comparatorFactory,serviceAreaScoreData, fullScorecardDataFactory, attributeScoreSummaryData) {

        var countryViewScoreDataCollection = [];
        var selectedServiceAreaId = "", selectedQuestionId = "";
        var selectedServiceAreaName = "", selectedQuestionName = "";
        var clickTimer = null;
        var isDoubleClickEvent = false;
        var selectedCountryId = "";
        var transitionDelay = 2000;

        $scope.fromView = "mapview";
        $scope.countryPopUp = {};
        $scope.isNeedToShowMapSummary=false;
        $scope.evaluationDataCollection = [];

        initializeCountryViewData();

        $scope.$on(Notify.ATTRIBUTE_EVALUATION_FROM_MAP_READY, function (event,response) {
            if(angular.isUndefined(response)) return;
            $scope.evaluationDataCollection = response.data;
        });
        $scope.$on(Notify.SERVICE_AREA_CHANGED, function () {
            selectedServiceAreaId = dataFactory.SelectedServiceAreaId();
            selectedServiceAreaName = getSelectedServiceAreaName(selectedServiceAreaId);
            selectedQuestionName = "";
            updateSelectedServiceAreaScoreData();
            updateMapView();
        });
        $scope.$on(Notify.SERVICE_AREA_QUESTION_CHANGED, function () {
            selectedQuestionId = dataFactory.GetSelectedQuestion().ID;
            selectedQuestionName = dataFactory.GetSelectedQuestion().Text;
            updateSelectedQuestionScoreData();
            updateMapView();
        });

        $scope.$on(Notify.DATASET_CHANGED, function () {
            initializeCountryViewData();
            updateMapView();
        });
        $scope.$on(Notify.DATA_READY, function () {
            initializeCountryViewData();
            updateMapView();
        });
        $scope.$on(Notify.DATA_FILTER_APPLIED, function () {
            initializeCountryViewData();
            updateMapView();
        });
        $scope.$on(Notify.COMPARATOR_TYPE_CHANGED, function () {
            updateSelectedServiceAreaScoreData();
            $scope.d3Data = countryViewScoreDataCollection;
            updateMapView();
        });
        $scope.$on(Notify.COMPARATOR_COLOR_CHANGED, function () {
            updateSelectedServiceAreaScoreData();
            $scope.d3Data = countryViewScoreDataCollection;
            updateMapView();
        });

        //Private Methods
        function onCountryClick(selectedCountry){
            setTimeout(function() {
                if (!isDoubleClickEvent) {
                    clickHandler(selectedCountry);
                    isDoubleClickEvent = false;
                }
            }, 400);
        };
        function clickHandler(selectedCountry){
            var selectedCountryViewScoreData = _.find(countryViewScoreDataCollection, function(n){
                return n.CountryKey == selectedCountry.properties.NAME;
            });
            if(selectedCountryViewScoreData){
                $scope.$apply(function(){
                    $scope.fromView = "mapview";
                    selectedCountryViewScoreData.Name = selectedCountryViewScoreData.DisplayName;
                    $scope.attributeData = selectedCountryViewScoreData;
                    $scope.attributeIndex = 4;
                    $scope.isNeedToShowMapSummary=true;
                    $scope.countryPopUp.openSummaryView(selectedCountryViewScoreData);
                });
            }
        }
        function initializeCountryViewData(){
            countryViewScoreDataCollection.length = 0;
            selectedServiceAreaId = dataFactory.SelectedServiceAreaId();

            prepareCountryViewDataCollection(dataFactory.CountryaScoreDataCollection());
            updateSelectedServiceAreaScoreData();
            $scope.d3Data = countryViewScoreDataCollection;
            selectedServiceAreaName = _.find(dataFactory.ServiceAreaCollection(),function(n){
                return n.Id == selectedServiceAreaId;
            }).Name;

        }

        function prepareCountryViewDataCollection(cCollection){
            for ( var i=0; i<cCollection.length; i++){
                var viewData = CreateViewDataFactory.CountryViewScoreData();
                viewData.Id =cCollection[i].Country.Id;
                viewData.CountryKey = cCollection[i].Country.Countrykey;
                viewData.DisplayName = cCollection[i].Country.Displayname;
                viewData.Score = NaN;
                viewData.Comparator = NaN;
                viewData.CountryColor = "#736F6E";
                viewData.MappedCountryValues = cCollection[i].Country.MappedCountryValues;
                viewData.ServiceAreaScoreDataCollection = cCollection[i].ServiceAreaScoreDataCollection;

                countryViewScoreDataCollection.push(viewData);
            }
        }

        function updateSelectedServiceAreaScoreData(){
            for (var i=0; i<countryViewScoreDataCollection.length; i++){
                var countryData = countryViewScoreDataCollection[i];
                if(countryData.ServiceAreaScoreDataCollection && countryData.ServiceAreaScoreDataCollection.length > 0){
                    var selectedScoreItems = _.filter(countryData.ServiceAreaScoreDataCollection, function(n){
                        return n.Id == selectedServiceAreaId
                    });
                    if(selectedScoreItems.length > 0){
                        countryData.Score = selectedScoreItems[0].Score;
                        countryData.Comparator = comparatorFactory.GetScoreItemComparator(selectedServiceAreaId);
                        countryData.CountryColor = dataFactory.GetScoreColor(countryData.Score, countryData.Comparator);
                        countryData.Respondent = selectedScoreItems[0].Respondent;
                    }
                    else{
                        countryData.Score = NaN;
                        countryData.Comparator = comparatorFactory.GetScoreItemComparator(selectedServiceAreaId);
                        countryData.CountryColor = dataFactory.GetScoreColor(countryData.Score, countryData.Comparator);
                        countryData.Respondent = 0;
                    }
                }
            }
        }
            function updateSelectedQuestionScoreData(){
                for (var i=0; i<countryViewScoreDataCollection.length; i++){
                    var countryData = countryViewScoreDataCollection[i];
                    if(countryData.ServiceAreaScoreDataCollection && countryData.ServiceAreaScoreDataCollection.length > 0){
                        var selectedScoreItems = _.filter(countryData.ServiceAreaScoreDataCollection, function(n){
                            return n.Id == selectedServiceAreaId
                        });
                        if(selectedScoreItems.length > 0){
                            var selectedQuestion = _.filter(selectedScoreItems[0].QuestionScores, function(n){
                                return n.QuestionId == selectedQuestionId
                            });
                            if(selectedQuestion.length > 0){
                                countryData.Score = selectedQuestion[0].Score;
                                countryData.Comparator = comparatorFactory.GetScoreItemComparator(selectedQuestionId);
                                countryData.CountryColor = dataFactory.GetScoreColor(countryData.Score, countryData.Comparator);
                            }
                            else{
                                countryData.Score = NaN;
                                countryData.Comparator = comparatorFactory.GetScoreItemComparator(selectedQuestionId);
                                countryData.CountryColor = dataFactory.GetScoreColor(countryData.Score, countryData.Comparator);
                            }

                        }
                    }
                }
            }
        var getSelectedServiceAreaName = function(serviceAreaId){
           return _.find(dataFactory.ServiceAreaCollection(),function(n){
             return n.Id == serviceAreaId;
          }).Name;
        };

        //d3 map stuffs start here
        var countries, projection, path, svg, g,
            active = d3.select(null),
            isReSetting =false,
            tooltip = d3.select("#container").append("div").attr("class", "tooltip hidden");

        // on window resize, re-render d3 canvas
        window.onresize = function() {
            return $scope.$apply();
        };

        $scope.$watch(function(){
                return angular.element(window)[0].innerWidth;
            }, function(){
                return $scope.render($scope.d3Data);
            }
        );

        var updateMapView = function()
        {
            g.selectAll(".feature").transition()
                .duration(700)
                .style("fill",setCountryFillColor);
        };

        //Set country color based on score and comparator
        var setCountryFillColor = function(d){
            var countryData = getCountryData(d.properties.NAME);
            if(countryData)
                return   countryData.CountryColor;
            else
                return  "#ccc";//Inactive country color
        };

        var getCountryData = function(countryKey){
            return _.find($scope.d3Data, function(n){
                return n.CountryKey == countryKey;
            });
        };
        // define render function
        $scope.render = function(data){

            var width = 0, height = 0;
            width = document.getElementById('mapContainer').offsetWidth;
            height = width/ 2;

            d3.select("#mapContainer").select('svg').remove();

            var zoom = d3.behavior.zoom()
                .scaleExtent([1, 60])//How far a map can be zoomed
                .on("zoom", move);

            setup(width,height);

            function setup(width,height){

                projection = d3.geo.mercator()
                    .translate([(width/2), height])
                    .scale( width / 2 / Math.PI);

                path = d3.geo.path().projection(projection);

                svg = d3.select("#mapContainer").append("svg")
                    .attr("width", "100%")
                    .attr("height", "100%")
                    .call(zoom)

                svg.append("rect")
                    .attr("class", "background")
                    .attr("width", "100%")
                    .attr("height", "100%")
                    .on("dblclick", reset);

                g = svg.append("g");
            }


            d3.json("Views/Map/Data/world_countries.json", function(error, world) {
                countries = topojson.feature(world, world.objects.world_countries).features;
                draw();
            });

            function draw() {
                var country = g.selectAll(".country").data(countries);
                country.enter().insert("path")
                    .attr("class", "feature")
                    .attr("d", path)
                    .on("dblclick", onDoubleClick)
                    .on("click", onCountryClick)
                    .attr("id", function(d) { return d.properties.NAME; })
                    .attr("title", function(d) { return d.properties.NAME; })
                    .style("fill", setCountryFillColor);
                if($scope.d3Data.length == 1) {
                    var countryId = $scope.d3Data[0].CountryKey;
                    var countryData = countries.filter(function (d) {
                        return d.properties.NAME === countryId;
                    });
                    fitToSpecificCountry(countryData);
                }
                //offsets for tooltips
                var offsetL = document.getElementById('container').offsetLeft+20;
                var offsetT = document.getElementById('container').offsetTop+10;

                //tooltips
                country
                    .on("mousemove", function(d,i) {
                        var countryData = getCountryData(d.properties.NAME);
                        var questionLabel = selectedQuestionName.length > 0 ? selectedQuestionName.toUpperCase() : selectedServiceAreaName.toUpperCase();
                        if(countryData != null && countryData != 'undefined') {
                            var mouse = d3.mouse(svg.node()).map(function (d) {
                                return parseInt(d);
                            });
                            var tooltipStr = "<div class='tip-header'>" +
                                "<div class='regionNameContainer'>" + countryData.DisplayName.toUpperCase() + "</div>" +
                                "<div class='serviceAreaContainer'>" + questionLabel + "</div>" +
                                "<div><svg  height='30' width='200'>";
                            var scoreBarWidth = 0;
                            if(countryData.Score >= 0) {
                                var scoreText = '';
                                if(selectedServiceAreaId !== 'OS'){
                                    scoreText = countryData.Score + '%';
                                    scoreBarWidth = countryData.Score;
                                }else{
                                    scoreText = countryData.Score;
                                    scoreBarWidth = countryData.Score * 10;
                                }
                                tooltipStr += "<text x='5' y='20'  style='fill: white; font-size: 16px' text-anchor='start'>" + scoreText + "</text>";
                            }
                            tooltipStr += "<rect x='50' y='10' width='100' height='7' style='fill:gray'></rect>" +
                                "<rect x='50' y='10' width='"+ scoreBarWidth +"' height='7' style='fill:" + countryData.CountryColor + "'></rect>";
                            if(countryData.Comparator >= 0) {
                                var comparatorPosition = 50;
                                if(selectedServiceAreaId !== 'OS'){
                                    comparatorPosition += countryData.Comparator;
                                }else{
                                    comparatorPosition +=  Math.round(countryData.Comparator * 10);
                                }
                                tooltipStr += "<rect x='" + comparatorPosition +  "' y='7' width='3' height='13' style='fill:#fff'></rect>" +
                                              "<text x='162' y='20' style='fill: white; font-size: 16px' text-anchor='start'>" + countryData.Comparator + "</text>";
                            }
                            tooltipStr += "</svg> </div>" +
                                "</div>" +
                                "<div class='footer'>Based on " + countryData.Respondent + " respondents</div>";
                            tooltip.classed("hidden", false)
                                .attr("style", "left:" + (mouse[0] + offsetL) + "px;top:" + (mouse[1] + offsetT) + "px;")
                                .html(tooltipStr);
                        }
                    })
                    .on("mouseout",  function(d,i) {
                        tooltip.classed("hidden", true);
                    });

            }

            function redraw() {
                width = document.getElementById('container').offsetWidth;
                height = width / 2;
                d3.select('svg').remove();
                setup(width,height);
                draw(topo);
            }

            function move() {

                var t = d3.event.translate;
                var s = d3.event.scale;

                var h = height/4;

                if(isReSetting){
                    isReSetting = false;
                    svg.transition()
                        .duration(transitionDelay)
                        .call(zoom.translate([0,0]).scale(1).event);
                    return;
                }

                t[0] = Math.min(
                    (width/height)  * (s - 1),
                    Math.max( width * (1 - s), t[0] )
                );

                t[1] = Math.min(
                    h * (s - 1) + h * s,
                    Math.max(height  * (1 - s) - h * s, t[1])
                );

                zoom.translate(t);
                g.attr("transform", "translate(" + t + ")scale(" + s + ")");

                //adjust the country hover stroke width based on zoom level
                d3.selectAll(".feature").style("stroke-width", 1.5 / s);
            }

            function fitToSpecificCountry(countryData){
                var containerWidth = document.getElementById('mapContainer').offsetWidth,
                    containerHeight = document.getElementById('mapContainer').offsetHeight;
                //if (active.node() === this) return reset();
                //active.classed("active", false);
                //active = d3.select(this).classed("active", true);
                var bounds;
                if(countryData.length == 1) {
                    bounds = path.bounds(countryData[0]);
                }else{
                    var maxX = 0, minX = containerWidth, maxY = 0, minY = containerHeight;
                    for(var i = 0; i < countryData.length; i++){
                        var countryPart = path.bounds(countryData[i]);
                        if(countryPart[0][0] < minX){
                            minX = countryPart[0][0];
                        }
                        if(countryPart[1][0] > maxX) {
                            maxX = countryPart[1][0];
                        }
                        if(countryPart[0][1] < minY){
                            minY = countryPart[0][1];
                        }
                        if(countryPart[1][1] > maxY) {
                            maxY = countryPart[1][1];
                        }
                    }
                    bounds = [[minX, minY],[maxX, maxY]];
                }
                var dx = bounds[1][0] - bounds[0][0],
                    dy = bounds[1][1] - bounds[0][1],
                    x = (bounds[0][0] + bounds[1][0]) / 2,
                    y = (bounds[0][1] + bounds[1][1]) / 2,
                    scale = Math.min(containerWidth / dx, containerHeight / dy),
                    translate = [containerWidth / 2 - scale * x, containerHeight / 2 - scale * y];

                svg.transition()
                    .duration(transitionDelay)
                    .call(zoom.translate(translate).scale(scale).event);
            }

            //var throttleTimer;
            //function throttle() {
            //    window.clearTimeout(throttleTimer);
            //    throttleTimer = window.setTimeout(function() {
            //        redraw();
            //    }, 200);
            //}

            function onDoubleClick(selectedCountry) {
                isDoubleClickEvent = true;
                if ($scope.d3Data.length > 1) {
                    if(selectedCountryId === selectedCountry.properties.NAME){
                        reset();
                    }else {
                        selectedCountryId = selectedCountry.properties.NAME;
                        var countryData = _.filter(countries, function (n) {
                            return n.properties.NAME == selectedCountry.properties.NAME;
                        });
                        fitToSpecificCountry(countryData);
                    }
                }

                setTimeout(function() {
                    isDoubleClickEvent = false;
                },500);
            }
            function reset() {
                if($scope.d3Data.length == 1) {
                    var countryId = $scope.d3Data[0].CountryKey;
                    var countryData = countries.filter(function (d) {
                        return d.properties.NAME === countryId;
                    });
                    fitToSpecificCountry(countryData);
                }else {
                    if(selectedCountryId.length > 0 || zoom.scale() > 1) {
                        selectedCountryId = "";
                        //active.classed("active", false);
                        //active = d3.select(null);
                        isReSetting = true;
                        //g.transition()
                        //    .duration(750)
                        //    .attr("transform", "");
                        svg.transition()
                            .duration(transitionDelay)
                            .call(zoom.translate([0,0]).scale(1).event);

                    }else{
                        svg.call(zoom).on("dblclick.zoom", null);
                    }
                }
            }
        };

    }]);

});
