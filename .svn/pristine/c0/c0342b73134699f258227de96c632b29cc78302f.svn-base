"use strict";
define(['application-configuration','d3','dataFactory','lodash','comparatorFactory'], function (app,d3) {
    app.register.controller('evaluationController', ['$scope','$rootScope','dataFactory','Notify','comparatorFactory','appSettings',
        function ($scope,$rootScope,dataFactory,Notify,comparatorFactory,appSettings) {

              $scope.serviceAreaEvaluationViewData = [];
              $scope.hasTranslation = false;
              $scope.isEvaluationSelected=true;
              $scope.isSummarySelected=false;
              $scope.selectedServiceAreaTitle="SA";
              var customerSettings = {};
              var isTranslationSelected = false;

                loadEvaluationData();
                loadCustomerSettings();
            var selectedServiceAreaId=dataFactory.SelectedServiceAreaId();
            $scope.summaryEvaluationExe=function(){
                console.log("show summary evaluation...");
                var coll = dataFactory.GetServiceAreaQuestionScoreFrequencyByServiceAreaId(dataFactory.SelectedServiceAreaId());
                var questionScoreFrequency= _.sortBy(coll.QuestionScoreFrequency,'AnswerType');
                //for OS questionScoreFrequency contain 1-10. for SES 1-6.if there any missing need to fill explicitly.
                var totalAnswer;
                if(dataFactory.SelectedServiceAreaId()=="OS"){
                    totalAnswer=10
                    for(var i=0;i<totalAnswer && questionScoreFrequency.length<10 ;i++){

                       var questionScoreFrequencyItem=questionScoreFrequency[i];
                        if( angular.isUndefined(questionScoreFrequencyItem)
                            || questionScoreFrequencyItem.AnswerType !=(i+1)){
                            var defaultQuestionScoreFrequency={
                                QuestionId: "general_OS",
                                AnswerType: i+1,
                                Frequency: 0
                            };
                            questionScoreFrequency.push(defaultQuestionScoreFrequency);
                        }
                    }
                }


                questionScoreFrequency= _.sortBy(questionScoreFrequency,'AnswerType');
                Array.prototype.sum = function (prop) {
                    var total = 0
                    for ( var i = 0, _len = this.length; i < _len; i++ ) {
                        total += this[i][prop]
                    }
                    return total
                }

                var svgHeight = 241;
                var svgWidth = 260;
                var maxFrequency=svgHeight;


                var maxAge = maxFrequency; // You can also compute this from the data
                var barSpacing = 1; // The amount of space you want to keep between the bars
                var padding = {
                    left: 20, right: 0,
                    top: 20, bottom: 20
                };

                function animateBarsUp() {
                    var maxWidth = svgWidth - padding.left - padding.right;
                    var maxHeight = svgHeight - padding.top - padding.bottom;

                    // Define your conversion functions
                    var convert = {
                        x: d3.scale.ordinal(),
                        y: d3.scale.linear()
                    };

                    // Define your axis
                    var axis = {
                        x: d3.svg.axis().orient('bottom'),
                        y: d3.svg.axis().orient('left')
                    };

                    // Define the conversion function for the axis points
                    axis.x.scale(convert.x);
                    axis.y.scale(convert.y).ticks(0);

                    // Define the output range of your conversion functions
                    convert.y.range([maxHeight, 0]);
                    convert.x.rangeRoundBands([0, maxWidth-30]);

                    // Once you get your data, compute the domains
                    convert.x.domain(questionScoreFrequency.map(function (d) {
                            return d.AnswerType;
                        })
                    );
                    convert.y.domain([0, maxAge]);

                    // Setup the markup for your SVG
                    var svg = d3.select('.chart')
                        .attr({
                            width: svgWidth,
                            height: svgHeight
                        });

                    // The group node that will contain all the other nodes
                    // that render your chart
                    var chart = svg.append('g')
                        .attr({
                            transform: function (d, i) {
                                return 'translate(' + padding.left + ',' + padding.top + ')';
                            }
                        });

                    chart.append('g') // Container for the axis
                        .attr({
                            class: 'x axis',
                            transform: 'translate(0,' + maxHeight + ')'
                        })
                        .call(axis.x); // Insert an axis inside this node

                    chart.append('g') // Container for the axis
                        .attr({
                            class: 'y axis',
                            height: maxHeight
                        })
                        .call(axis.y); // Insert an axis inside this node

                    var bars = chart
                        .selectAll('g.bar-group')
                        .data(questionScoreFrequency)
                        .enter()
                        .append('g') // Container for the each bar
                        .attr({
                            transform: function (d, i) {
                                return 'translate(' + convert.x(d.AnswerType) + ', 0)';
                            },
                            class: 'bar-group'
                        });
                    bars.append('text')
                        .attr({
                            y: maxHeight-5,
                            class:'bar-frequency-label'
                        })
                        .text(function(d){
                            if(d.Frequency==0)
                            return ""
                            else
                            return d.Frequency
                        })
                        .transition()
                        .duration(1500)
                        .attr({
                            y: function (d, i) {
                                return convert.y(d.Frequency)-5;
                            },
                            class:'bar-frequency-label'
                        })


                    bars.append('rect')
                        .attr({
                            y: maxHeight,
                            height: 0,
                            width: function (d) { return convert.x.rangeBand(d) -5 ; },
                            class: function(d,i){
                                if(selectedServiceAreaId=="OS"){
                                    if(i<=4){
                                        return "rect-red";
                                    }
                                    else if(i==5){
                                        return "rect-neutral";
                                    }
                                    else
                                    {
                                        return "rect-green";
                                    }

                                }
                            }
                        })
                        .transition()
                        .duration(1500)
                        .attr({
                            y: function (d, i) {
                                return convert.y(d.Frequency);
                            },
                            height: function (d, i) {
                                return maxHeight - convert.y(d.Frequency);
                            }
                        });

                    return chart;
                }

                animateBarsUp();

            }
                $scope.summary_selectedClickHandler=function(){
                    $("#selected-evaluation-window-arrow").addClass('left-menu-summary-arrow-selected').removeClass('left-menu-evaluation-arrow-selected');
                    $scope.isEvaluationSelected=false;
                    $scope.isSummarySelected=true;

                }
                $scope.evaluation_selectedClickHandler=function(){
                    $("#selected-evaluation-window-arrow").addClass('left-menu-evaluation-arrow-selected').removeClass('left-menu-summary-arrow-selected');
                    $scope.isEvaluationSelected=true;
                    $scope.isSummarySelected=false;
                }
                function loadCustomerSettings() {
                    customerSettings = dataFactory.CustomerGeneralSettings();
                    $scope.hasTranslation = customerSettings.HasTranslation;
                }
                function loadEvaluationData() {
                    setEvaluationWindowTopBar();

                    var selectedEvaluationColl = filterEvaluationDataBySurveyType();
                    if (angular.isUndefined(selectedEvaluationColl) || selectedEvaluationColl.length == 0) {
                        var evaluationRequestParam = getEvaluationsRequestParam();
                        getSelectedServiceAreaEvaluations(evaluationRequestParam);
                    }
                    else {
                        prepareServiceAreaEvaluationViewData(selectedEvaluationColl);
                    }
                }
            function setEvaluationWindowTopBar(){
                var serviceAreaColl = dataFactory.ServiceAreaScoreDataCollection();
                var selectedServiceArea = dataFactory.GetSelectedServiceArea()
                var result= _.filter(serviceAreaColl,function(item){
                    return item.Id==selectedServiceArea.Id;
                })
                var serviceArea = result[0];
                $scope.positiveCount = serviceArea.PositiveResponse;
                $scope.negativeCount = serviceArea.NegativeResponse;
                $scope.selectedServiceAreaId = serviceArea.Id;
                var comparatorValue=comparatorFactory.GetScoreItemComparator(serviceArea.Id);
                var colorCode=dataFactory.GetScoreColor(serviceArea.Score, comparatorValue);
                $scope.selectedServiceAreaTitle=selectedServiceArea.Name;
                $scope.scoreBarData={
                    Score:serviceArea.Score,
                    Comparator:comparatorValue,
                    ScoreColor:colorCode,
                    QuestionId:serviceArea.Id
                }
                $scope.isComparatorEnable = serviceArea.Id==="SES"?"false":"true";

            }
                function filterEvaluationDataBySurveyType() {
                    var evaluationColl = dataFactory.GetEvaluationDataCollection();
                    var selectedSurveyType = surveyTypeConverter(dataFactory.GetSelectedServiceAreaSurveyType());
                    var selectedEvaluationColl;
                    var result = _.forEach(evaluationColl, function (item) {
                        if (item.SurveyType == selectedSurveyType) {
                            selectedEvaluationColl = item;
                        }
                    })
                    return selectedEvaluationColl;
                }

                function getSelectedServiceAreaEvaluations(param) {

                    dataFactory.GetEvaluations(param);
                }

                function getEvaluationsRequestParam() {
                    var applicationDataInfo = dataFactory.DataInfo();
                    var selectedSurveyType = dataFactory.GetSelectedServiceAreaSurveyType();
                    return{
                        sessionID: applicationDataInfo.sessionID,
                        customerID: applicationDataInfo.customerID,
                        fromDate: applicationDataInfo.fromDate,
                        toDate: applicationDataInfo.toDate,
                        surveyType: surveyTypeConverter(selectedSurveyType)
                    }
                };
                function surveyTypeConverter(type) {
                    return  type == "NOG" ? "GEN" : type;
                }

                //$scope.$on(Notify.DATASET_CHANGED, function (event) {
                //
                //});

                //$scope.$on(Notify.SERVICE_AREA_CHANGED, function (event, response) {
                //    $scope.selectedServiceAreaTitle=dataFactory.SelectedServiceAreaId;
                //    var item= dataFactory.GetSelectedServiceArea();
                //    loadEvaluationData();
                //
                //});
                $scope.translationSelectionListener = function (type) {
                    isTranslationSelected = type === 2;
                };
                $scope.$on(Notify.EVALUATION_DATA_READY, function (event, response) {
                    var attDataCollection = filterEvaluationDataBySurveyType();
                    prepareServiceAreaEvaluationViewData(attDataCollection);
                });
                function prepareServiceAreaEvaluationViewData(data) {
                    $scope.selectedServiceAreaType = dataFactory.GetSelectedServiceAreaSurveyType();
                    $scope.serviceAreaEvaluationViewData = [];
                    var serviceAreaQuestionCollection = dataFactory.GetServiceAreaQuestionsById(dataFactory.SelectedServiceAreaId());
                    $scope.customAttributeCollection = dataFactory.CustomAttributeCollection();
                    var evaluationData = data.EvaluationCollection;
                    for (var i = 0; i < evaluationData.length; i++) {
                        var selectedEvaluationData = filterEvaluationData(evaluationData[i].ServiceAreaEvaluations)
                        if(selectedEvaluationData){
                            var evaluation = {
                                RespondentId:evaluationData[i].RespondentId,
                                AttributeValues:evaluationData[i].AttributeValues,
                                Remarks: selectedEvaluationData.Remarks,
                                RemarksAdd: selectedEvaluationData.RemarksAdd,
                                RemarksAddEng: selectedEvaluationData.RemarksAddEng,
                                RemarksEng: selectedEvaluationData.RemarksEng,
                                ServiceAreaId: selectedEvaluationData.ServiceAreaId,
                                Answers: [],
                                BothEvaluationData:{Remarks:selectedEvaluationData.Remarks,
                                    RemarksEng: selectedEvaluationData.RemarksEng,Answers: []}};

                            _.forEach(selectedEvaluationData.Answers, function (item) {
                                item.QuestionText = _.find(serviceAreaQuestionCollection, function(n){
                                    return n.ID == item.QuestionId;
                                }).Text;
                                evaluation.Answers.push(item);
                                evaluation.BothEvaluationData.Answers.push(item);
                            })
                            $scope.serviceAreaEvaluationViewData.push(evaluation);
                        }

                    }
                    //console.log("view data length :" + $scope.serviceAreaEvaluationViewData.length);
                }

                function filterEvaluationData(evaluationData) {
                    var result = "";
                    var serviceAreaId = dataFactory.SelectedServiceAreaId();
                    result = _.filter(evaluationData, function (n) {
                        return (n.ServiceAreaId == serviceAreaId);
                    });
                    return result[0];
                }
            $scope.download_data = function(){
               var requestParameter = getEvaluationsRequestParam();
               var url = addParameterToURL(requestParameter,appSettings.API_BASE_URL+"EvaluationDataTemplate.aspx");
               window.location.href =  url;
            };
            function formatDate(date) {
                date = new Date(date);

                var day = ('0' + date.getDate()).slice(-2);
                var month = ('0' + (date.getMonth() + 1)).slice(-2);
                var year = date.getFullYear();

                return year + '-' + month + '-' + day;
            }

            function addParameterToURL(requestParameter,_url){
                var param = "sessionId="+requestParameter.sessionID;
                param += "&customerId=" +requestParameter.customerID;
                param += "&fromDate=" +formatDate(requestParameter.fromDate).toString();
                param += "&toDate=" +formatDate(requestParameter.toDate).toString();
                param += "&surveyType=" +requestParameter.surveyType;
                param += "&serviceAreaId="+dataFactory.GetSelectedServiceArea().Id;
                param += "&isAttributeEvaluation="+"false";
                param += "&hasTranslation="+ (isTranslationSelected ? "YES" : "NO");
                param += "&hasAdditionalRemarks="+(customerSettings.HasAdditionalRemarks ? "YES" : "NO");

                _url += (_url.split('?')[1] ? '&':'?') + param;
                return _url;
            }
//            function setEvaluationUIGrid(){
//                setResetUIGridColumn();
//                $scope.evaluationUiGridConfig.data = $scope.serviceAreaEvaluationViewData;
//                for(var l=0;l<$scope.serviceAreaEvaluationViewData.length;l++)
//                {
//                    console.log("remarks: "+$scope.serviceAreaEvaluationViewData[l].Remarks);
//                }
//                $scope.gridApi.grid.refresh();
//            }
//            function setResetUIGridColumn(){
//                while($scope.columnsGrd && $scope.columnsGrd.length > 0) {
//                    $scope.columnsGrd.pop();
//                }
//                var commentsGridColumn= {
//                    field: 'Remarks',
//                    displayName: 'COMMENTS',
//                    enableSorting: true,
//                    // width:120,
//                    headerCellTemplate: 'Views/LeftMenu.Evaluations/EvaluationUIGrid/HeaderTemplates/HeaderTemplate.html',
//                    cellTemplate: 'Views/LeftMenu.Evaluations/EvaluationUIGrid/CellTemplates/CommentsColumnCellTemplate.html'
//                };
//                $scope.columnsGrd.push(commentsGridColumn);
//                $scope.evaluationUiGridConfig.columnDefs = $scope.columnsGrd;
//            }
           //grid external scope factory
//            $scope.evaluationGridScope = {
//                rowHover: function (row) {
//
//                },
//                rowHoverOut: function (row) {
//
//                },
//                rowClick: function (row,rowRenderIndex) {
//
//                }
//            }

        }]);
});
