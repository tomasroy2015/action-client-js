"use strict";

define(['application-configuration', 'd3','topojson','d3Map','dataFactory','CountryViewScoreData', 'moreSettingsFactory','comparatorFactory'], function (app) {

    app.register.controller('mapViewController', ['$document', '$scope','dataFactory','Notify','CountryViewScoreData','moreSettingsFactory','comparatorFactory',
        function ($document,$scope,dataFactory,Notify,CountryViewScoreData,moreSettingsFactory,comparatorFactory) {

        var countryViewScoreDataCollection = [];
        var selectedServiceAreaId = "";


        initializeCountryViewData();


        $scope.$on(Notify.SERVICE_AREA_CHANGED, function () {
            selectedServiceAreaId = dataFactory.SelectedServiceAreaId();
            updateSelectedServiceAreaScoreData();
            $scope.d3ServiceId = selectedServiceAreaId;
        });
        $scope.$on(Notify.DATASET_CHANGED, function () {
            initializeCountryViewData();
        });

        $scope.$on(Notify.COMPARATOR_TYPE_CHANGED, function () {
            updateSelectedServiceAreaScoreData();
            $scope.d3Data = countryViewScoreDataCollection;
        });

        //Private Methods
        function initializeCountryViewData(){
            selectedServiceAreaId = dataFactory.SelectedServiceAreaId();
            prepareCountryViewDataCollection(dataFactory.CountryaScoreDataCollection());
            updateSelectedServiceAreaScoreData();
            $scope.d3Data = countryViewScoreDataCollection;
            $scope.d3ServiceId = selectedServiceAreaId;
        }

        function prepareCountryViewDataCollection(cCollection){
            for ( var i=0; i<cCollection.length; i++){
                var viewData = new CountryViewScoreData();
                viewData.CountryKey = cCollection[i].Country.Countrykey;
                viewData.DisplayName = cCollection[i].Country.Displayname;
                viewData.Score = NaN;
                viewData.Comparator = NaN;
                viewData.CountryColor = "#736F6E";
                viewData.MappedCountryValues = cCollection[i].Country.MappedCountryValues;
                viewData.ServiceAreaScoreDataCollection = cCollection[i].ServiceAreaScoreDataCollection;

                countryViewScoreDataCollection.push(viewData);
            }
        }

        function updateSelectedServiceAreaScoreData(){
            for (var i=0; i<countryViewScoreDataCollection.length; i++){
                var countryData = countryViewScoreDataCollection[i];
                if(countryData.ServiceAreaScoreDataCollection && countryData.ServiceAreaScoreDataCollection.length > 0){
                    var selectedScoreItems = _.filter(countryData.ServiceAreaScoreDataCollection, function(n){
                        return n.Id == selectedServiceAreaId
                    });
                    if(selectedScoreItems.length > 0){
                        countryData.Score = selectedScoreItems[0].Score;
                        countryData.Comparator = comparatorFactory.GetScoreItemComparator(selectedServiceAreaId);
                        if(!isNaN(countryData.Score)){
                            if(countryData.Score > countryData.Comparator)
                                countryData.CountryColor = moreSettingsFactory.GetSelectedColorSet().OnTarget;
                            else
                                countryData.CountryColor = moreSettingsFactory.GetSelectedColorSet().FarFromTarget;
                        }

                    }
                }
            }
        }

    }]);

});
