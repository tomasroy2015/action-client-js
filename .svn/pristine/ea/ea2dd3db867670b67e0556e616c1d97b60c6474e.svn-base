"use strict";

define(['application-configuration', 'dataFilterFactory', 'CreateViewDataFactory', 'addToGroupController'], function (app) {

    app.register.controller('dataFilterController', ['$scope', '$interval', 'dataFactory', 'dataFilterFactory', 'Notify', 'CreateViewDataFactory', 'uiGridTreeViewConstants', '$timeout', '$filter', 'uiGridConstants', '$modal', function ($scope, $interval, dataFactory, dataFilterFactory, Notify, CreateViewDataFactory, uiGridTreeViewConstants, $timeout, $filter, uiGridConstants, $modal) {

        //app.register.filter("arrayIds", function () {
        //    return function (data,filterArr) {
        //        return (filterArr.indexOf(data.Id) !== -1);
        //    };
        //});

        $scope.dataFilterFactory = dataFilterFactory;
        $scope.ApplyFilterModelCollection = [];
        $scope.SelectedItems = [];
        $scope.IsAddToGroupBtnEnabled = true;

        $scope.$watch(function () {
            return dataFilterFactory.GetSelectedAttributeIndex();
        }, function (newIndex) {
            if (newIndex !== undefined && newIndex >= 0) {
                //clearSelectedRows();
                var attDataCollection = dataFactory.GetAtributeScoreDataCollection();
                var oSelectedServiceArea = dataFactory.GetSelectedServiceArea();

                //updateDataFilerScoreAndRespondent()

                var query = _.filter(attDataCollection, function (n) {
                    return n.AttributeIndex == newIndex;
                });

                if (query !== undefined && query.length === 0) {
                    prepareSelectedAttributeServiceAreaData();
                }
                else {
                    loadDataFilterData(query[0].ScoreDataCollection);
                }
            }
        });


        /* LeftMenu Attribute Click Event Listener */
        $scope.$watch(function () {
            return dataFilterFactory.GetLeftMenuAttributeClickedEvent();
        }, function (newVal) {
            if (newVal) {
                $scope.SelectedItems = [];
                clearSelectedRows();
                updateDataFilerScoreAndRespondent();
                gridRefresh();
                dataFilterFactory.SetLeftMenuAttributeClickedEvent(false);
            }
        });

        /* LeftMenu Reset Button Click Event Listener */
        $scope.$watch(function () {
            return dataFilterFactory.GetDataFilterResetClickedEvent();
        }, function (newVal) {
            if (newVal) {
                $scope.ApplyFilterModelCollection = [];
                dataFilterFactory.SetAppliedDataFilterCollection($scope.ApplyFilterModelCollection);
                $scope.SelectedItems = [];
                //dataFactory.setGeneralApplyFilter(null);
                //dataFactory.setTriggerApplyFilter(null);
                dataFactory.ResetFilter();
                dataFilterFactory.SetDataFilterResetClickedEvent(false);
            }
        });

        $scope.$on(Notify.ATTRIBUTE_DATA_READY, function (event) {
            //clearSelectedRows();
            var attDataCollection = dataFactory.GetAtributeScoreDataCollection();

            var query = _.filter(attDataCollection, function (n) {
                return n.AttributeIndex == dataFilterFactory.GetSelectedAttributeIndex();
            })
            if (query && query.length > 0) {
                //var sSA = dataFactory.GetSelectedServiceArea();
                loadDataFilterData(query[0].ScoreDataCollection);
            }
        });

        $scope.$on(Notify.DATAFILTER_GROUP_CREATED, function (event) {
            var attDataCollection = dataFactory.GetAtributeScoreDataCollection();

            var query = _.filter(attDataCollection, function (n) {
                return n.AttributeIndex == dataFilterFactory.GetSelectedAttributeIndex();
            })
            if (query && query.length > 0) {
                loadDataFilterData(query[0].ScoreDataCollection);
            }
        });

        function loadDataFilterData(data) {
            //TODO
            //console.log(data);
            //clearSelectedRows();
            var selectedServiceAreaId = dataFactory.GetSelectedServiceArea().Id;
            var preparedData = [];
            _.forEach(data, function (n, key) {
                var oDataFilterViewData = CreateViewDataFactory.DataFilterViewData(selectedServiceAreaId, n);
                oDataFilterViewData.$$treeLevel = 0;
                preparedData.push(oDataFilterViewData);
                if (n.IsGroup && n.GroupItemsScoreDataCollection && n.GroupItemsScoreDataCollection.length > 0) {
                    _.forEach(n.GroupItemsScoreDataCollection, function (n2) {
                        oDataFilterViewData = CreateViewDataFactory.DataFilterViewData(selectedServiceAreaId, n2);
                        oDataFilterViewData.IsChild = true;
                        preparedData.push(oDataFilterViewData);
                    });
                }
            });
            $scope.gridPreparedData = preparedData;
            gridRefresh();
        }

        function prepareSelectedAttributeServiceAreaData() {
            gridReset();
            var selectedAttribute = {
                Label: dataFilterFactory.GetSelectedAttribute().Label,
                Index: dataFilterFactory.GetSelectedAttribute().Index,
                Type: dataFilterFactory.GetSelectedAttribute().Type
            };

            var requestParam = attributeRequestParam(selectedAttribute);
            dataFactory.GetSelectedAttributeScoreData(requestParam);
        }

        function attributeRequestParam(attr) {
            var applicationDataInfo = dataFactory.DataInfo();
            var selectedSurveyType = dataFactory.GetSelectedServiceAreaSurveyType();

            return {
                sessionID: applicationDataInfo.sessionID,
                customerID: applicationDataInfo.customerID,
                fromDate: applicationDataInfo.fromDate,
                toDate: applicationDataInfo.toDate,
                attributeIndex: attr.Index,
                surveyType: selectedSurveyType
            }
        };

        //$scope.gridOptions.data = gridPreparedData;
        //$scope.gridOptions.columnDefs =  $scope.columnDefs;

        $scope.columnDefs = [
            {
                field: 'Name', displayName: 'NAME', width: 205,
                //cellTemplate: '<div class="ui-grid-cell-contents" ng-class="{\'child-item\':row.entity.IsChild}"><input type="checkbox" name="chk" ng-checked="row.isSelected"/><i aria-hidden="true" ng-if="row.entity.IsGroup" ng-click="grid.appScope.toggleRow($event,row)" ng-class="{\'fa fa-play\': row.treeNode.state === \'collapsed\', \'fa fa-play fa-rotate-90\': row.treeNode.state === \'expanded\'}"></i> {{row.entity.Name}}</div>'
                cellTemplate: '<div class="ui-grid-cell-contents name-column" ng-class="{\'child-item\':row.entity.IsChild}"><i aria-hidden="true" ng-if="row.entity.IsGroup" ng-click="grid.appScope.toggleRow($event,row)" ng-class="{\'fa fa-play\': row.treeNode.state === \'collapsed\', \'fa fa-play fa-rotate-90\': row.treeNode.state === \'expanded\'}" class="group-triangle"></i> {{row.entity.Name}}<span class=\"delete-group-btn\" ng-if="row.entity.IsGroup || row.entity.IsChild" ng-click="grid.appScope.onGroupDeleteBtnClickHandler($event,row)"><i class=\"fa fa-times\"></i></span></div>'
                , headerCellTemplate: 'Views/DataFilter/DataFilterNameHeaderTemplate.html'
                //    , cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {
                //    if (rowRenderIndex === (grid.rows.length-1)) {
                //        return 'last-item';
                //    }
                //}
            },
            {field: 'Score', displayName: 'SCORE', width: 80, cellClass: 'center-text',type:'number'},
            {field: 'Respondent', displayName: '#RESP', width: 80, cellClass: 'center-text',type:'number'}];

        $scope.lastItem = function (grid, row) {

            var currentIndex = $scope.gridPreparedData.indexOf(row.entity);
            // console.log(grid);

            if (currentIndex === (grid.rows.length - 1)) {
                return 'last-item';
            }
        };

        $scope.gridOptions = {
            //data: 'gridPreparedData',
            enableSorting: true,
            rowHeight: 25,
            //columnDefs: $scope.columnDefs,
            enableColumnMenus: false,
            enableRowSelection: true,
            enableSelectAll: true,
            showTreeExpandNoChildren: false,
            showTreeRowHeader: false,
            selectionRowHeaderWidth: 20,
            treeRowHeaderAlwaysVisible: false,
            enableRowHeaderSelection: true,
            //rowTemplate: '<div><div id="{{rowRenderIndex}}" ng-repeat="col in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell row-color" ui-grid-cell></div></div>'
            rowTemplate: 'Views/DataFilter/DataFilterRowTemplate.html'
        };

        $scope.gridOptions.columnDefs = $scope.columnDefs;
        $scope.gridOptions.enableFullRowSelection = true;
        $scope.gridOptions.onRegisterApi = function (gridApi) {
            $scope.gridApi = gridApi;
            gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                //$scope.SelectedItems = gridApi.selection.getSelectedRows();
                if (row && row.isSelected) {
                    $scope.SelectedItems.push(row.entity);
                    if (row.treeNode && row.treeNode.children) {
                        row.treeNode.children.forEach(function (childNode) {
                            //childNode.row.isSelected = true;
                            childNode.row.setSelected(true);
                            $scope.SelectedItems.push(childNode.row.entity);
                        });
                    }
                } else if (row && !row.isSelected) {
                    var index = -1;
                    if ($scope.SelectedItems && $scope.SelectedItems.length > 0) {
                        index = $scope.SelectedItems.indexOf(row.entity);
                        if (index > -1) {
                            $scope.SelectedItems.splice(index, 1);
                        }
                        if (row.treeNode && row.treeNode.children.length > 0) {
                            var childIndex = -1;
                            row.treeNode.children.forEach(function (childNode) {
                                //childNode.row.isSelected = false;
                                childNode.row.setSelected(false);
                                childIndex = $scope.SelectedItems.indexOf(childNode.row.entity);
                                if (childIndex > -1) {
                                    $scope.SelectedItems.splice(childIndex, 1);
                                }
                            });
                        }
                    }
                }
                onCheckGroupItemSelection();
            });

            gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
                //var msg = 'rows changed ' + rows.length;
                //console.log(msg);
                //$scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.OPTIONS);
                $timeout(function () {
                    //var tmp = $scope.gridApi.selection.getSelectAllState();
                    //console.log($scope.gridApi.selection.getSelectAllState());

                    //if($scope.gridApi.selection.getSelectAllState()){
                    //    $scope.SelectedItems = $scope.gridApi.selection.getSelectedRows();
                    //} else{
                    //    $scope.SelectedItems = $scope.gridApi.selection.getSelectedRows();
                    //}
                    //$scope.gridApi.selection.selectAll = $scope.gridApi.selection.getSelectAllState();
                    $scope.SelectedItems = $scope.gridApi.selection.getSelectedRows();
                    $scope.gridApi.selection.selectAll = $scope.gridApi.grid.rows.length === $scope.gridApi.grid.selection.selectedCount;
                    $scope.gridApi.grid.selection.selectAll = $scope.gridApi.grid.rows.length === $scope.gridApi.grid.selection.selectedCount;

                }, 200).then(function () {
                    onCheckGroupItemSelection();
                });
            });

        };//

        //$interval(function () {
        //    $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
        //}, 0, 1);

        function gridRefresh() {
            $scope.gridOptions.data = $scope.gridPreparedData;
            $scope.gridApi.grid.refresh();
            if ($scope.ApplyFilterModelCollection && $scope.ApplyFilterModelCollection.length > 0) {
                $timeout(function () {
                    selectAppliedRows();
                }, 100);
            }
        }

        function gridReset() {
            $scope.gridPreparedData = [];
            $scope.gridOptions.data = $scope.gridPreparedData;
            $scope.gridApi.grid.refresh();
        }

        function updateDataFilerScoreAndRespondent() {
            if ($scope.gridPreparedData && $scope.gridPreparedData.length > 0) {
                //DataFilterViewData
                var tmp = _.forEach($scope.gridPreparedData, function (oDataFilterViewData) {
                    oDataFilterViewData.SelectedServiceAreaScoreData(dataFactory.GetSelectedServiceArea().Id);
                });
                $scope.gridPreparedData = tmp;
            }
        }

        /**
         * Clear all selected rows
         */
        function clearSelectedRows() {
            if ($scope.gridApi) {
                $scope.gridApi.selection.clearSelectedRows();
                //$scope.gridApi.selection.selectAll = false;
                //$scope.gridApi.grid.selection.selectAll = false;
                //$scope.gridApi.grid.refresh();
            }
        }

        /**
         * Select all Applied Rows
         */
        function selectAppliedRows() {
            if ($scope.gridApi.selection.selectRow) {
                //$scope.CheckedSelectedAttributeColl = _.forEach($scope.ApplyFilterModelCollection, function (attr) {
                //    return attr.Index === dataFilterFactory.GetSelectedAttributeIndex();
                //});
                var SelectedAttribute = dataFilterFactory.GetSelectedAttribute();
                $scope.CheckedSelectedAttributeColl = _.filter($scope.ApplyFilterModelCollection, function (attr) {
                    return (attr.Index === SelectedAttribute.Index && attr.Type === SelectedAttribute.Type);
                });

                if ($scope.CheckedSelectedAttributeColl && $scope.CheckedSelectedAttributeColl.length > 0) {
                    //var temp = $filter('arrayIds')($scope.gridOptions.data, currentSelectAttributeColl[0].Ids);
                    //if ($scope.gridOptions.data.length === currentSelectAttributeColl[0].Ids.length) {
                    //    $scope.gridApi.selection.selectAllRows();
                    //    return;
                    //}

                    _.forEach($scope.gridOptions.data, function (item) {
                        //return (currentSelectAttributeColl[0].Ids.indexOf(item.Id) !== -1);
                        if ($scope.CheckedSelectedAttributeColl[0].Ids.indexOf(item.Id) !== -1) {
                            $scope.gridApi.selection.selectRow(item);
                        }
                    });
                }
            }
        }


        $scope.toggleRow = function (event, row) {
            //$scope.gridApi.treeBase.toggleRowTreeState($scope.gridApi.grid.renderContainers.body.visibleRowCache[rowNum]);
            $scope.gridApi.treeBase.toggleRowTreeState(row);
            event.preventDefault();
            event.stopPropagation();
        };

        /* Row hovering event handler
         ======================================================*/

        $scope.rowHover = function (row) {
            //console.log('row hover...');
        };

        $scope.rowHoverOut = function (row) {
            //console.log('row hover out...');
        };

        /* Apply button event
         ======================================================*/
        $scope.btnApplyEventHandler = function () {
            var oSelectedAttribute = dataFilterFactory.GetSelectedAttribute();

            if ($scope.SelectedItems.length === 0 && $scope.ApplyFilterModelCollection.length === 0) return;

            if ($scope.SelectedItems.length === 0) {
                //$scope.ApplyFilterModelCollection = [];
                if ($scope.ApplyFilterModelCollection.length > 0) {
                    var findItem1 = _.find($scope.ApplyFilterModelCollection, {
                        Type: oSelectedAttribute.Type,
                        Index: oSelectedAttribute.Index
                    });
                    var delIndex1 = _.indexOf($scope.ApplyFilterModelCollection, findItem1);
                    if (delIndex1 >= 0) {
                        $scope.ApplyFilterModelCollection.splice(delIndex1, 1);
                    }
                }

                //dataFilterFactory.SetAppliedDataFilterCollection($scope.ApplyFilterModelCollection);
                //dataFactory.ResetFilter();
                //dataFilterFactory.SetDataFilterApplyBtnClickedEvent(true);
                //return;
            }
            //var oSelectedAttribute = dataFilterFactory.GetSelectedAttribute();

            if ($scope.ApplyFilterModelCollection.length > 0) {
                var findItem = _.find($scope.ApplyFilterModelCollection, {Type: oSelectedAttribute.Type});
                var delIndex = _.indexOf($scope.ApplyFilterModelCollection, findItem);
                if (delIndex >= 0) {
                    $scope.ApplyFilterModelCollection.splice(delIndex, 1);
                }
            }

            var selectItemIds = [];
            _.forEach($scope.SelectedItems, function (item) {
                selectItemIds.push(item.Id);
            });

            var attrValue = '';
            attrValue = oSelectedAttribute.AttributeName;
            if (selectItemIds.length === 1) {
                attrValue = $scope.SelectedItems[0].Name;
            }

            var oApplyFilterModel = dataFilterFactory.ApplyFilterModel(oSelectedAttribute.Index, oSelectedAttribute.Type, oSelectedAttribute.VerticaColumnName, selectItemIds, attrValue);

            if (oApplyFilterModel.Ids && oApplyFilterModel.Ids.length > 0)
                $scope.ApplyFilterModelCollection.push(oApplyFilterModel);

            if ($scope.ApplyFilterModelCollection && $scope.ApplyFilterModelCollection.length > 0) {
                prepareApplyData($scope.ApplyFilterModelCollection);
            } else {
                dataFactory.ResetFilter();
            }

            dataFilterFactory.SetAppliedDataFilterCollection($scope.ApplyFilterModelCollection);
            //Close DataFilter window event
            dataFilterFactory.SetDataFilterApplyBtnClickedEvent(true);
        };

        function prepareAttributeRoute() {
            return '/' + dataFactory.DataInfo().customerID + '/' + dataFactory.DataInfo().sessionID;
        }

        function prepareApplyData(coll) {
            var genFilter = _.filter(coll, function (item) {
                return item.Type !== 2;
            });

            if (genFilter && genFilter.length > 0)
                dataFactory.setGeneralApplyFilter(prepareApplyFilterParams(genFilter));

            var trigFilter = _.filter(coll, function (item) {
                return item.Type === 2;
            });

            if (trigFilter && trigFilter.length > 0)
                dataFactory.setTriggerApplyFilter(prepareApplyFilterParams(trigFilter));
        }

        function prepareApplyFilterParams(coll) {
            var filterString = '', count = 0;
            _.forEach(coll, function (item) {
                count++;
                var prefix = "Fact." + item.VerticaColumnName + " in (";
                var postfix = item.Ids.join(',') + ')';

                filterString += prefix + postfix;
                filterString += coll.length !== count ? " AND " : '';
            });
            return filterString;
        }

        $scope.onAddToGroupClickHandler = function () {
            //$scope.ddlColl = [];
            //var defaultGroup = {Id: 0, Name: 'Select group'};
            //$scope.ddlColl.push(defaultGroup);
            $scope.ddlColl = prepareExistingGroupColl();

            var data = $scope.gridApi.selection.getSelectedRows();

            var modalInstance = $modal.open({
                animation: false,
                templateUrl: 'Views/DataFilter/AddToGroupWindowTemplate.html',
                controller: 'addToGroupController',
                resolve: {
                    items: function () {
                        return data;
                    },
                    ddlColl: function () {
                        return $scope.ddlColl;
                    }
                }, keyboard: false,
                backdrop: 'static',
                windowClass: 'add-to-group-window-modal'

            });

            modalInstance.result.then(function (Group) {
                //$scope.finalItems = selectedItems;
                //console.log($scope.finalItems);

                if (Group.Items.length > 0) {
                    var _Ids = _.pluck(Group.Items, 'Id');
                    var groupItems = _.pluck(Group.Items, 'Name');

                    var oDimensionValueGroupModel = CreateViewDataFactory.DimensionValueGroupModel(Group.GroupName, groupItems);
                    dataFactory.setNewGroupItem({
                        AttributeIndex: dataFilterFactory.GetSelectedAttributeIndex(),
                        Name: Group.GroupName,
                        Ids: _Ids,
                        IsAddInExistingGroup: Group.IsAddInExistingGroup,
                        ExistingGroupItems: Group.ExistingGroupItems
                    });

                    dataFactory.CreateDimensinoValueGroup(oDimensionValueGroupModel, prepareAddtoGroupAttributeRoute());
                }

            }, function () {
                //$log.info('Modal dismissed at: ' + new Date());
            });
        }//

        function prepareAddtoGroupAttributeRoute() {
            return '/' + dataFactory.DataInfo().customerID + '/' + dataFilterFactory.GetSelectedAttribute().Index + '/' + dataFactory.DataInfo().sessionID;
        }

        $scope.onGroupDeleteBtnClickHandler = function (event, row) {
            var delGroupItems = [], groupName = '', _Ids = [];
            if (row && row.entity) {
                if (row.entity.IsGroup) {
                    groupName = row.entity.Name;
                    if (row.treeNode && row.treeNode.children) {
                        row.treeNode.children.forEach(function (childNode) {
                            _Ids.push(childNode.row.entity.Id);
                            delGroupItems.push(childNode.row.entity.Name);
                        });
                    }
                } else {
                    if (row.treeNode && row.treeNode.parentRow && row.treeNode.parentRow.entity) {
                        groupName = row.treeNode.parentRow.entity.Name;
                    }
                    _Ids.push(row.entity.Id);
                    delGroupItems.push(row.entity.Name);
                }
                var oDimensionValueGroupDeleteModel = CreateViewDataFactory.DimensionValueGroupDeleteModel(groupName, row.entity.IsGroup, delGroupItems);

                dataFactory.setDelGroupItem({
                    AttributeIndex: dataFilterFactory.GetSelectedAttributeIndex(),
                    Name: groupName,
                    IsGroupDelete: row.entity.IsGroup,
                    Ids: _Ids
                });
                dataFactory.DeleteDimensinoValueGroup(oDimensionValueGroupDeleteModel, prepareAddtoGroupAttributeRoute());
            }
        };//

        function prepareExistingGroupColl() {

            var existingGroup = [];
            var defaultGroup = {Id: 0, Name: 'Select group', Items: []};
            existingGroup.push(defaultGroup);

            var filterOutExistingGroups = _.filter($scope.gridOptions.data, function (item) {
                return item.IsGroup === true;
            });

            _.forEach(filterOutExistingGroups, function (gItem) {
                var existingGroupItems = [];
                var tmpIds = gItem.Id.split(',');
                _.forEach(tmpIds, function (id) {
                    var foundItem = _.find($scope.gridOptions.data, {Id: id, IsChild: true});
                    if (foundItem) {
                        existingGroupItems.push(foundItem);
                    }
                })
                existingGroup.push({Id: gItem.Id, Name: gItem.Name, Items: existingGroupItems});
            });

            return existingGroup;
        }

        $scope.$on(Notify.DATAFILTER_GROUP_DELETED, function (event) {
            if ($scope.ExistingGroupItemAddModel) {
                dataFactory.CreateDimensinoValueGroup($scope.ExistingGroupItemAddModel, prepareAddtoGroupAttributeRoute());
                $scope.ExistingGroupItemAddModel = null;
            }
        });

        //Check Group item is selected
        function onCheckGroupItemSelection() {
            //$scope.IsAddToGroupBtnEnabled = false;
            //if($scope.SelectedItems.length > 0) {
            //    var _foundItems = _.findWhere($scope.SelectedItems, {IsGroup: true});
            //    if (_foundItems) {
            //        $scope.IsAddToGroupBtnEnabled = true;
            //    }
            //} else{
            //
            //}

            $scope.IsAddToGroupBtnEnabled = false;
            var _foundItems = _.findWhere($scope.SelectedItems, {IsGroup: true});
            if ($scope.SelectedItems.length === 0) {
                $scope.IsAddToGroupBtnEnabled = true;
            } else if ($scope.SelectedItems.length > 0 && _foundItems) {
                $scope.IsAddToGroupBtnEnabled = true;
            }

        }

    }]);//

});
