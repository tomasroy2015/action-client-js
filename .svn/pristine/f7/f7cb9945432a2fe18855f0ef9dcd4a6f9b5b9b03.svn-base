
"use strict";

define(['application-configuration','ui-grid-unstable'], function (app) {

    app.register.directive('actionEvaluations', ['uiGridConstants',function (uiGridConstants) {
        return {
            restrict: 'AE',
            scope:{
                evaluationCollection:'=',
                selectedServiceAreaId:'=',
                onItemClick:'&'
            },
            link:function (scope, el, attrs) {
                scope.evaluationUiGridConfig = {
                    rowHeight: 40,
                    enableSorting: true,
                    rowSelectionHeader: false,
                    enableFullRowSelection: true,
                    enableRowSelection: false,
                    multiSelect: false,
                    showTreeRowHeader:false,
                    onRegisterApi: function (gridApi) {
                        scope.gridApi = gridApi;
                        scope.gridApi.grid.options.enableHorizontalScrollbar=0;
                        scope.gridApi.core.on.sortChanged(scope, function (grid, sort) {
                            scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                            scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.EDIT);
                        });

                    },
                    rowTemplate: 'Views/LeftMenu.Evaluations/EvaluationUIGrid/EvaluationGridRowTemplate.html'
                };
                scope.columnSortOrder = "";
                scope.selectedColumnName;
                scope.columnsGrd=[];

                scope.$watch(function(scope){return scope.evaluationCollection},function(newValue,oldValue){
                    if(angular.isUndefined(newValue))
                    return;
                    setEvaluationUIGrid();
                    function setEvaluationUIGrid(){
                        setResetUIGridColumn();
                        scope.evaluationUiGridConfig.data = newValue;
                        for(var l=0;l<newValue.length;l++)
                        {
                            console.log("remarks: "+newValue[l].Remarks);
                        }
                        if(!angular.isUndefined(scope.gridApi))
                            scope.gridApi.grid.refresh();
                    }
                    function setResetUIGridColumn(){
                        while(scope.columnsGrd && scope.columnsGrd.length > 0) {
                            scope.columnsGrd.pop();
                        }
                        var commentsGridColumn= {
                            field: 'Remarks',
                            displayName: 'COMMENTS',
                            enableSorting: true,
                            // width:120,
                            headerCellTemplate: 'Views/LeftMenu.Evaluations/EvaluationUIGrid/HeaderTemplates/HeaderTemplate.html',
                            cellTemplate: 'Views/LeftMenu.Evaluations/EvaluationUIGrid/CellTemplates/CommentsColumnCellTemplate.html'
                        };
                        scope.columnsGrd.push(commentsGridColumn);
                        scope.evaluationUiGridConfig.columnDefs = scope.columnsGrd;
                    }
                },true)
                scope.onEvaluationItemClick = function(selectedItem){
                    scope.onItemClick({selectedEvaluation:selectedItem});
                };
            },
            templateUrl: 'Views/Shared/Template/ServiceAreaEvaluationsTemplate.html'
        };
    }]);

});