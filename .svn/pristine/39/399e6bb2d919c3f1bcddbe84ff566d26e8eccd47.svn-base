"use strict";
define(['application-configuration'], function (app) {

    app.register.directive('actionEvaluationAnswerScores',["moreSettingsFactory", function (moreSettingsFactory) {
        var boxId = 1;
        return {
            restrict: 'EA',
            scope   : {
                id:'=',
                value:'=',
                colorSet:'=',
                height:'@',
                width:'@',
                questionId:'='
            },

            templateUrl: "Views/Shared/Template/Evaluation/EvaluationUIGrid/CellTemplates/EvaluationAnswerScoresDirectiveTemplate.html",
            replace    : true,
            link       : function (scope, el, attr) {
                var rectWidth= 26;
                var rectHeight=22;
                if(!angular.isUndefined(scope.height) && !angular.isUndefined(scope.width)){
                    rectWidth=scope.width;
                    rectHeight=scope.height;
                }
                scope.$watchGroup( ['value','colorSet','id'], function(newValue,oldValue){
                    if(angular.isUndefined(newValue))
                    {
                       return;
                    }
                   // console.log("new Question Score"+newValue.Score+" Old Question Score: "+oldValue.Score);
                    var score = newValue[0];
                    var colorCode=getAnswerColorCode(score) ;
                    function getAnswerColorCode(value){

                       var colorCode = "#FFFFFF";
                        if(value == -1){
                           return "#555759"; //dark Gray
                       }
                       var colorSet=moreSettingsFactory.GetSelectedColorSet();
                        if(scope.questionId.indexOf("OS")>-1){

                            if( value>0 && value<6){
                                colorCode=colorSet.FarFromTarget;
                            }
                            else if( value ==6){
                                colorCode=colorSet.CloseToTarget;
                            }
                            else if(value > 6){
                                colorCode=colorSet.OnTarget;
                            }
                        }
                        else if(scope.questionId.indexOf("SES")>-1){
                            if( value>0 && value<4){
                                colorCode=colorSet.FarFromTarget;
                            }

                            else if(value > 3){
                                colorCode=colorSet.OnTarget;
                            }

                        }
                        else {
                            if( value>0 && value<3){
                                colorCode=colorSet.FarFromTarget;
                            }
                            else if(value > 2){
                                colorCode=colorSet.OnTarget;
                            }
                        }
                        return colorCode;
                    }


                    var scoreBoxId = 'evaluationScoreBox' + boxId++;
                    el.find('canvas').attr('id', scoreBoxId);
                    var scoreCanvas =document.getElementById(scoreBoxId); //$(el).find("canvas").get(0);
                    var context = scoreCanvas.getContext("2d");//$(el).find("canvas").get(0).getContext("2d");
                    context.clearRect(0, 0, scoreCanvas.width, scoreCanvas.height);
                    //context.save();
                    context.fillStyle = colorCode;

                    context.fillRect(0, 0, rectWidth, rectHeight);
                    context.fillStyle = 'white';
                    var w = context.measureText(score.toString()).width;
                    var x = Math.round((rectWidth - w) / 2); //(rectWidth / 2) - (w / 2);
                    var y = rectHeight / 2;
                    context.font = "bold 12px AkkuratStd-Regular";
                    context.textBaseline = 'center';
                    if(!isNaN(score) &&score>-1 )
                        context.fillText(score, x, y + 4);
                    else
                        context.fillText('NA', 4, y+4);
                   // context.restore();
                },true);
                //console.log("Score obj value is :"+scope.scoreObj.Score);
            }

        };
    }]);
});