"use strict";

define(['application-configuration', 'd3','topojson'], function (app,d3,topojson) {

    app.register.directive('d3Map', [function () {

        return {
            restrict: 'EA',
            scope: {
                data: "=",
                label: "@",
                onClick: "&"
            },
            link: function(scope, iElement, iAttrs) {

                var m_width = parseInt(iAttrs.mapWidth) || 700,
                    width = parseInt(iAttrs.mapWidth) || 700,
                    height = parseInt(iAttrs.mapHeight) || 500;

                // var svg = d3.select(iElement[0])
                //     .append("svg")
                //     .attr("width", "100%");

                var svg = d3.select(iElement[0]).append("svg")
                    .attr("preserveAspectRatio", "xMidYMid")
                    .attr("viewBox", "0 0 " + width + " " + height)
                    .attr("width", "100%")
                    .attr("height", m_width * height / width);

                // on window resize, re-render d3 canvas
                window.onresize = function() {
                    return scope.$apply();
                };
                scope.$watch(function(){
                        return angular.element(window)[0].innerWidth;
                    }, function(){
                        return scope.render(scope.data);
                    }
                );

                // watch for data changes and re-render
                scope.$watch('data', function(newVals, oldVals) {
                    return scope.render(newVals);
                }, true);

                // define render function
                scope.render = function(data){
                    // remove all previous items before render
                    svg.selectAll("*").remove();




                    // setup variables
                    var m_width = 700,
                        width = 938,
                        height = 500,
                        country,
                        state;

                    var projection = d3.geo.mercator()
                        .scale(150)
                        .translate([width / 2, height / 1.5]);

                    var path = d3.geo.path()
                        .projection(projection);

                    svg.append("rect")
                        .attr("class", "background")
                        .attr("width", width)
                        .attr("height", height)
                        .on("click", country_clicked);


                    var g = svg.append("g");

                    d3.json("Views/Map/countries.topo.json", function (error, us) {
                        g.append("g")
                            .attr("id", "countries")
                            .selectAll("path")
                            .data(topojson.feature(us, us.objects.countries).features)
                            .enter()
                            .append("path")
                            .attr("id", function (d) {
                                return d.id;
                            })
                            .attr("d", path)
                            .on("click", country_clicked);

                    });

                    function zoom(xyz) {
                        g.transition()
                            .duration(750)
                            .attr("transform", "translate(" + projection.translate() + ")scale(" + xyz[2] + ")translate(-" + xyz[0] + ",-" + xyz[1] + ")")
                            .selectAll(["#countries", "#states", "#cities"])
                            .style("stroke-width", 1.0 / xyz[2] + "px")
                            .selectAll(".city")
                            .attr("d", path.pointRadius(20.0 / xyz[2]));
                    }

                    function get_xyz(d) {
                        var bounds = path.bounds(d);
                        var w_scale = (bounds[1][0] - bounds[0][0]) / width;
                        var h_scale = (bounds[1][1] - bounds[0][1]) / height;
                        var z = .96 / Math.max(w_scale, h_scale);
                        var x = (bounds[1][0] + bounds[0][0]) / 2;
                        var y = (bounds[1][1] + bounds[0][1]) / 2 + (height / z / 6);
                        return [x, y, z];
                    }

                    function country_clicked(d) {
                        g.selectAll(["#states", "#cities"]).remove();
                        state = null;
                        var titleDiv = d3.select("#clickedCountry");
                        titleDiv.text(d.properties.name);
                        if (country) {
                            g.selectAll("#" + country.id).style('display', null);
                            g.selectAll("#" + country.id).style('fill', "#fff000");
                        }

                        if (d && country !== d) {
                            var xyz = get_xyz(d);
                            country = d;

                            if (d.id == 'USA' || d.id == 'JPN') {
                                d3.json("Views/Map/states_" + d.id.toLowerCase() + ".topo.json", function (error, us) {
                                    g.append("g")
                                        .attr("id", "states")
                                        .selectAll("path")
                                        .data(topojson.feature(us, us.objects.states).features)
                                        .enter()
                                        .append("path")
                                        .attr("id", function (d) {
                                            return d.id;
                                        })
                                        .attr("class", "active")
                                        .attr("d", path)
                                        .on("click", state_clicked);

                                    zoom(xyz);
                                    g.selectAll("#" + d.id).style('display', 'none');
                                });
                            } else {
                                zoom(xyz);
                            }
                        } else {
                            var xyz = [width / 2, height / 1.5, 1];
                            country = null;
                            zoom(xyz);
                        }

                    }

                    function state_clicked(d) {
                        g.selectAll("#cities").remove();

                        if (d && state !== d) {
                            var xyz = get_xyz(d);
                            state = d;

                            var country_code = state.id.substring(0, 3).toLowerCase();
                            var state_name = state.properties.name;

                            d3.json("Views/Map/cities_" + country_code + ".topo.json", function (error, us) {
                                g.append("g")
                                    .attr("id", "cities")
                                    .selectAll("path")
                                    .data(topojson.feature(us, us.objects.cities).features.filter(function (d) {
                                        return state_name == d.properties.state;
                                    }))
                                    .enter()
                                    .append("path")
                                    .attr("id", function (d) {
                                        return d.properties.name;
                                    })
                                    .attr("class", "city")
                                    .attr("d", path.pointRadius(20 / xyz[2]));

                                zoom(xyz);
                            });
                        } else {
                            state = null;
                            country_clicked(country);
                        }
                    }
                };


            }
        };
    }]);

});